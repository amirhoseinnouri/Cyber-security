// behavior_analyzer.cpp
#include "behavior_analyzer.h"
#include <fstream>
#include <sstream>
#include <cstring>
#include <pwd.h>
#include <grp.h>

std::vector<std::string> BehaviorAnalyzer::analyze(const std::string& filePath) {
    std::vector<std::string> suspiciousBehaviors;
    
    if (checkExecutablePermissions(filePath)) {
        suspiciousBehaviors.push_back("Unexpected executable permissions");
    }
    
    if (checkHiddenFile(filePath)) {
        suspiciousBehaviors.push_back("Hidden file detected");
    }
    
    if (checkSuspiciousScript(filePath)) {
        suspiciousBehaviors.push_back("Suspicious script content detected");
    }
    
    return suspiciousBehaviors;
}

bool BehaviorAnalyzer::checkExecutablePermissions(const std::string& filePath) {
    struct stat fileStat;
    if (stat(filePath.c_str(), &fileStat) == 0) {
        return (fileStat.st_mode & S_IXUSR) || 
               (fileStat.st_mode & S_IXGRP) || 
               (fileStat.st_mode & S_IXOTH);
    }
    return false;
}

bool BehaviorAnalyzer::checkHiddenFile(const std::string& filePath) {
    size_t pos = filePath.find_last_of('/');
    std::string filename = (pos != std::string::npos) ? filePath.substr(pos+1) : filePath;
    return !filename.empty() && filename[0] == '.';
}

bool BehaviorAnalyzer::checkSuspiciousScript(const std::string& filePath) {
    std::ifstream file(filePath);
    if (!file) return false;
    
    std::string line;
    while (std::getline(file, line)) {
        // Check for common malicious patterns
        if (line.find("rm -rf") != std::string::npos ||
            line.find("chmod 777") != std::string::npos ||
            line.find("/dev/tcp/") != std::string::npos ||
            line.find("wget http") != std::string::npos) {
            return true;
        }
    }
    return false;
}