// database.cpp
#include "database.h"
#include <iostream>

MalwareDatabase::MalwareDatabase() : db(nullptr) {}

bool MalwareDatabase::initialize() {
    if (sqlite3_open("malware_db.sqlite", &db) != SQLITE_OK) {
        std::cerr << "Database open error: " << sqlite3_errmsg(db) << std::endl;
        return false;
    }
    
    const char* createTableSQL = 
        "CREATE TABLE IF NOT EXISTS malware_hashes ("
        "hash TEXT PRIMARY KEY,"
        "name TEXT NOT NULL);";
    
    char* errMsg = nullptr;
    if (sqlite3_exec(db, createTableSQL, nullptr, nullptr, &errMsg) != SQLITE_OK) {
        std::cerr << "Table creation error: " << errMsg << std::endl;
        sqlite3_free(errMsg);
        return false;
    }
    
    return true;
}

bool MalwareDatabase::isMalware(const std::string& hash) {
    sqlite3_stmt* stmt;
    const char* query = "SELECT 1 FROM malware_hashes WHERE hash = ?;";
    
    if (sqlite3_prepare_v2(db, query, -1, &stmt, nullptr) != SQLITE_OK) {
        return false;
    }
    
    sqlite3_bind_text(stmt, 1, hash.c_str(), -1, SQLITE_STATIC);
    
    bool result = (sqlite3_step(stmt) == SQLITE_ROW);
    sqlite3_finalize(stmt);
    
    return result;
}
// In database.cpp
MalwareDatabase::~MalwareDatabase() {
    if (db) {
        sqlite3_close(db);
        db = nullptr;
    }
}