// scanner.cpp
#include "scanner.h"
#include <iostream>
#include <dirent.h>
#include <sys/stat.h>
#include <cstring>

namespace fs = std::filesystem;

Scanner::Scanner(const std::string& path) : rootPath(path) {}

std::vector<std::string> Scanner::scanFiles() {
    std::vector<std::string> fileList;
    traverseDirectory(rootPath, fileList);
    return fileList;
}

void Scanner::traverseDirectory(const std::string& path, std::vector<std::string>& fileList) {
    DIR* dir;
    struct dirent* entry;
    struct stat statbuf;

    if ((dir = opendir(path.c_str())) == nullptr) {
        perror("opendir");
        return;
    }

    while ((entry = readdir(dir)) != nullptr) {
        std::string fullPath = path + "/" + entry->d_name;
        
        if (stat(fullPath.c_str(), &statbuf) == -1) {
            perror("stat");
            continue;
        }

        if (S_ISDIR(statbuf.st_mode)) {
            // Skip . and .. directories
            if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0)
                continue;
            
            traverseDirectory(fullPath, fileList);
        } else {
            fileList.push_back(fullPath);
        }
    }
    closedir(dir);
}