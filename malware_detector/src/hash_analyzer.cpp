// hash_analyzer.cpp
#include "hash_analyzer.h"
#include <fstream>
#include <iomanip>
#include <sstream>

std::string HashAnalyzer::calculateSHA256(const std::string& filePath) {
    std::ifstream file(filePath, std::ios::binary);
    if (!file) return "";
    
    SHA256_CTX shaContext;
    SHA256_Init(&shaContext);
    
    char buffer[1024];
    while (file.read(buffer, sizeof(buffer))) {
        SHA256_Update(&shaContext, buffer, file.gcount());
    }
    
    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256_Final(hash, &shaContext);
    
    std::stringstream ss;
    for (int i = 0; i < SHA256_DIGEST_LENGTH; ++i) {
        ss << std::hex << std::setw(2) << std::setfill('0') << (int)hash[i];
    }
    
    return ss.str();
}

bool HashAnalyzer::checkAgainstDatabase(const std::string& hash) {
    // Connect to SQLite database and check hash existence
    // Simple example:
    return (hash == "known_malware_hash_example");
}